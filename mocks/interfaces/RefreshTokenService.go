// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/laenur/simple-login/entity"

	mock "github.com/stretchr/testify/mock"
)

// RefreshTokenService is an autogenerated mock type for the RefreshTokenService type
type RefreshTokenService struct {
	mock.Mock
}

// DeleteByUserID provides a mock function with given fields: userID
func (_m *RefreshTokenService) DeleteByUserID(userID int64) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByToken provides a mock function with given fields: token
func (_m *RefreshTokenService) FindByToken(token string) (entity.RefreshToken, error) {
	ret := _m.Called(token)

	var r0 entity.RefreshToken
	if rf, ok := ret.Get(0).(func(string) entity.RefreshToken); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(entity.RefreshToken)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: userID
func (_m *RefreshTokenService) Save(userID int64) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRefreshTokenService interface {
	mock.TestingT
	Cleanup(func())
}

// NewRefreshTokenService creates a new instance of RefreshTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRefreshTokenService(t mockConstructorTestingTNewRefreshTokenService) *RefreshTokenService {
	mock := &RefreshTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entity "github.com/laenur/simple-login/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

// Delete provides a mock function with given fields: userID
func (_m *UserService) Delete(userID int64) error {
	ret := _m.Called(userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: searchUsername, page, pageSize, sort, sortBy
func (_m *UserService) Find(searchUsername *string, page int, pageSize int, sort string, sortBy string) ([]entity.User, error) {
	ret := _m.Called(searchUsername, page, pageSize, sort, sortBy)

	var r0 []entity.User
	if rf, ok := ret.Get(0).(func(*string, int, int, string, string) []entity.User); ok {
		r0 = rf(searchUsername, page, pageSize, sort, sortBy)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*string, int, int, string, string) error); ok {
		r1 = rf(searchUsername, page, pageSize, sort, sortBy)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUserID provides a mock function with given fields: userID
func (_m *UserService) FindByUserID(userID int64) (entity.User, error) {
	ret := _m.Called(userID)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(int64) entity.User); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: userID, username, password, roles
func (_m *UserService) Save(userID *int64, username string, password string, roles []int) (entity.User, error) {
	ret := _m.Called(userID, username, password, roles)

	var r0 entity.User
	if rf, ok := ret.Get(0).(func(*int64, string, string, []int) entity.User); ok {
		r0 = rf(userID, username, password, roles)
	} else {
		r0 = ret.Get(0).(entity.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*int64, string, string, []int) error); ok {
		r1 = rf(userID, username, password, roles)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserService interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserService(t mockConstructorTestingTNewUserService) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
